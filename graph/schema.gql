enum Status {
    created
    approved
    rejected
    paid
}

enum SourceOfMoney {
    ownAccount
    otherAccount
    cash
}

enum UserRole {
    basic
    admin
    root
}

scalar Date
scalar DateTime
scalar Upload

type SystemInfo {
    database: String!
    serverVersion: String!
}

input ViewOptions {
    author: String!
    status: String!
}

type User {
    id: ID!
    name: String!
    email: String!
    signature: String
    position: String!
    role: UserRole!
    hasPassword: Boolean!
    phone: String
    iban: String
    costClaims: [CostClaim!]!
    purchaseInvoices: [PurchaseInvoice!]!
    salesInvoices: [SalesInvoice!]!
}

input UserInput {
    name: String!
    email: String!
    role: UserRole!
    password: String
}

input SettingsInput {
    name: String!
    email: String!
    position: String!
    signature: Upload
    newPassword: String
    phone: String!
    iban: String!
}

type Receipt {
    id: ID!
    attachment: String!
    amount: Float!
    date: Date!
}

input ReceiptInput {
    id: ID
    date: Date!
    amount: Float!
    file: Upload
}

type CostPool {
    id: ID!
    name: String!
    budget: Float!
    total: Float!
    costClaims: [CostClaim!]!
    salesInvoices: [SalesInvoice!]!
    purchaseInvoices: [PurchaseInvoice!]!
}

input CostPoolInput {
    name: String!
    budget: Float!
}

type CostPoolsConnection {
    nodes: [CostPool!]!
    totalCount: Int!
}

type CostClaim {
    id: ID!
    runningNumber: Int!
    description: String!
    author: User!
    costPool: CostPool!
    status: Status!
    details: String
    created: DateTime!
    modified: DateTime
    approvedBy: User
    sourceOfMoney: SourceOfMoney!
    otherIban: String
    receipts: [Receipt!]!
    total: Float!
}

input CostClaimInput {
    description: String!
    costPool: ID!
    details: String
    sourceOfMoney: SourceOfMoney!
    otherIban: String
}

type CostClaimsConnection {
    nodes: [CostClaim!]!
    totalCount: Int!
}

type Contact {
    id: ID!
    name: String!
    address: String!
    salesInvoices: [SalesInvoice!]!
    purchaseInvoices: [PurchaseInvoice!]!
}

input ContactInput {
    name: String!
    address: String
}

type ContactsConnection {
    nodes: [Contact!]!
    totalCount: Int!
}

input InvoiceRowInput {
    id: ID
    costPool: ID!
    description: String!
    amount: Float!
}

type SalesInvoiceRow {
    id: ID!
    invoice: SalesInvoice!
    costPool: CostPool!
    description: String!
    amount: Float!
}

type SalesInvoice {
    id: ID!
    author: User!
    runningNumber: Int!
    recipient: Contact!
    date: Date!
    dueDate: Date!
    created: DateTime!
    modified: DateTime
    status: Status!
    details: String
    payerReference: String
    contactPerson: String
    rows: [SalesInvoiceRow!]!
    total: Float!
}

input SalesInvoiceInput {
    recipient: ID!
    date: Date!
    dueDate: Date!
    details: String
    payerReference: String
    contactPerson: String
}

type SalesInvoicesConnection {
    nodes: [SalesInvoice!]!
    totalCount: Int!
}

type PurchaseInvoiceRow {
    id: ID!
    invoice: PurchaseInvoice!
    costPool: CostPool!
    description: String!
    amount: Float!
}

type PurchaseInvoice {
    id: ID!
    author: User!
    sender: Contact!
    description: String!
    dueDate: Date!
    status: Status!
    approvedBy: User
    created: DateTime!
    modified: DateTime
    details: String
    note: String
    rows: [PurchaseInvoiceRow!]!
    total: Float!
}

input PurchaseInvoiceInput {
    sender: ID!
    description: String!
    dueDate: Date!
    details: String
}

type PurchaseInvoicesConnection {
    nodes: [PurchaseInvoice!]!
    totalCount: Int!
}

type Query {
    costClaims(
        limit: Int = 20
        offset: Int! = 0
        viewOptions: ViewOptions
    ): CostClaimsConnection!
    costClaim(id: ID!): CostClaim

    user(id: ID): User!
    users(limit: Int = 20, offset: Int! = 0): [User!]!

    costPools(limit: Int = 20, offset: Int! = 0): CostPoolsConnection!
    costPool(id: ID!): CostPool!

    contacts(
        limit: Int = 20
        offset: Int! = 0
        searchTerm: String
    ): ContactsConnection!
    contact(id: ID!): Contact!

    purchaseInvoices(
        limit: Int = 20
        offset: Int! = 0
        viewOptions: ViewOptions
    ): PurchaseInvoicesConnection!
    purchaseInvoice(id: ID!): PurchaseInvoice!

    salesInvoices(
        limit: Int = 20
        offset: Int! = 0
        viewOptions: ViewOptions
    ): SalesInvoicesConnection!
    salesInvoice(id: ID!): SalesInvoice!

    systemInfo: SystemInfo!
}

type Mutation {
    createUser(user: UserInput!): User!
    updateUser(id: ID!, user: UserInput!): User!
    deleteUser(id: ID!): ID!

    login(email: String!, password: String!): User!
    updateSettings(settings: SettingsInput!): User!
    logout: Boolean!

    createCostPool(costPool: CostPoolInput!): CostPool!
    updateCostPool(id: ID!, costPool: CostPoolInput!): CostPool!
    deleteCostPool(id: ID!): ID!

    createCostClaim(
        costClaim: CostClaimInput!
        receipts: [ReceiptInput!]!
    ): CostClaim!
    updateCostClaim(
        id: ID!
        costClaim: CostClaimInput!
        receipts: [ReceiptInput!]!
    ): CostClaim!
    deleteCostClaim(id: ID!): ID!
    setCostClaimStatus(id: ID!, status: Status!): CostClaim!

    createContact(contact: ContactInput!): Contact!
    updateContact(id: ID!, contact: ContactInput!): Contact!
    deleteContact(id: ID!): ID!

    createPurchaseInvoice(
        invoice: PurchaseInvoiceInput!
        rows: [InvoiceRowInput!]!
    ): PurchaseInvoice!
    updatePurchaseInvoice(
        id: ID!
        invoice: PurchaseInvoiceInput!
        rows: [InvoiceRowInput!]!
    ): PurchaseInvoice!
    deletePurchaseInvoice(id: ID!): ID!

    createSalesInvoice(
        invoice: SalesInvoiceInput!
        rows: [InvoiceRowInput!]!
    ): SalesInvoice!
    updateSalesInvoice(
        id: ID!
        invoice: SalesInvoiceInput!
        rows: [InvoiceRowInput!]!
    ): SalesInvoice!
    deleteSalesInvoice(id: ID!): ID!
}
