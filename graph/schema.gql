enum Status {
    created
    approved
    rejected
    paid
}

enum SourceOfMoney {
    ownAccount
    otherAccount
    cash
}

enum UserRole {
    basic
    admin
    root
}

scalar Date
scalar DateTime
scalar Upload

type User {
    id: ID!
    name: String!
    email: String!
    signature: String
    role: UserRole!
    hasPassword: Boolean!
}

input UserInput {
    name: String!
    email: String!
}

type Receipt {
    id: ID!
    attachment: String!
    amount: Float!
    date: Date!
}

input ReceiptInput {
    id: ID
    date: Date!
    amount: Float!
    file: Upload
}

type CostPool {
    id: ID!
    name: String!
    budget: Float!
    total: Float!
}

input CostPoolInput {
    name: String!
    budget: Float!
}

type CostClaim {
    id: ID!
    runningNumber: Int!
    description: String!
    author: User!
    costPool: CostPool!
    status: Status!
    details: String
    created: DateTime!
    modified: DateTime
    acceptedBy: User
    sourceOfMoney: SourceOfMoney!
    receipts: [Receipt]!
    total: Float!
}

input CostClaimInput {
    description: String!
    author: ID!
    costPool: ID!
    details: String
    sourceOfMoney: SourceOfMoney!
}

type Contact {
    id: ID!
    name: String!
    address: String!
}

input ContactInput {
    name: String!
    address: String
}

type Query {
    costClaims(limit: Int = 20, offset: Int! = 0): [CostClaim!]!
    costClaim(id: ID!): CostClaim
    user(id: ID!): User
    users(limit: Int = 20, offset: Int! = 0): [User!]!
    costPools(limit: Int = 20, offset: Int! = 0): [CostPool!]!
    contacts(limit: Int = 20, offset: Int! = 0): [Contact!]!
    accessToken(email: String!, password: String!): String!
}

type Mutation {
    createUser(user: UserInput!): User!

    createCostPool(costPool: CostPoolInput!): CostPool!
    updateCostPool(id: ID!, costPool: CostPoolInput!): CostPool!
    deleteCostPool(id: ID!): ID!

    createCostClaim(
        costClaim: CostClaimInput!
        receipts: [ReceiptInput!]!
    ): CostClaim!
    updateCostClaim(
        id: ID!
        costClaim: CostClaimInput!
        receipts: [ReceiptInput!]!
    ): CostClaim!
    deleteCostClaim(id: ID!): ID!
    setCostClaimStatus(id: ID!, status: Status!): CostClaim!

    createContact(contact: ContactInput!): Contact!
}
